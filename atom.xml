<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Hrvoje's Blog]]></title>
  <link href="https://blog.hrvoje.org/atom.xml" rel="self"/>
  <link href="https://blog.hrvoje.org/"/>
  <updated>2018-06-01T15:54:51+02:00</updated>
  <id>https://blog.hrvoje.org/</id>
  <author>
    <name><![CDATA[Hrvoje]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[The Eagle Has Landed]]></title>
    <link href="https://blog.hrvoje.org/blog/2015/12/03/the-eagle-has-landed/"/>
    <updated>2015-12-03T11:47:55+01:00</updated>
    <id>https://blog.hrvoje.org/blog/2015/12/03/the-eagle-has-landed</id>
    <content type="html"><![CDATA[<p>The year was 1984. Apple Macintosh was just introduced, as well as our own
shiny new computer called “Orao” (Eagle). It ended up being chosen as a
standard primary school computer in Croatia from 1985 to 1991. For many of us,
kids back then, this was one of the first opportunities to ever use a computer.
Simple and rudimentary by today’s standards, Orao was brilliantly designed to
avoid using specialized components - only simple TTL logic and off-the-shelf
parts were used.</p>

<p>I wanted to write a cross-platform emulator, and after making one in Python,
decided to go a step further and port it to Javascript. This is perhaps the
most convenient way to use it, even though not all features were ported. To
invoke BASIC, enter “BC” after booting. It can fetch one of the available tape
images as .wav files via AJAX and load them. Loading takes time, computers
were slow back then. :-)</p>

<p>For a slightly more complete version, check the 
<a href="https://github.com/hrvach/OraoPy">Python version</a>, but if you just want a
quick dose of nostalgia - <a href="http://orao.hrvoje.org">HERE</a> it is!</p>

<p>TL;DR: enter BC at the * (star) prompt, press ENTER when asked about the memory
size and try one of the following:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
</pre></td><td class="code"><pre><code class=""><span class="line">LMEM "SPACEINV"
</span><span class="line">LMEM "CRVIC"
</span><span class="line">LMEM "MUZIKA"
</span><span class="line">LMEM "DEMO2"
</span><span class="line">LMEM "RUSENJE"
</span><span class="line">LMEM "TETRIS" (start with LNK4096)</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Double quotes = shift + 2. To erase something, use ctrl + H or left arrow.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Ghost Ship]]></title>
    <link href="https://blog.hrvoje.org/blog/2015/07/15/ghost-detect/"/>
    <updated>2015-07-15T15:29:34+02:00</updated>
    <id>https://blog.hrvoje.org/blog/2015/07/15/ghost-detect</id>
    <content type="html"><![CDATA[<p>Lately I’ve been solving some problems on <a href="http://www.checkio.org">CheckiO</a>, a really addictive programming site, and stumbled upon a very interesting golf mission. So, you might ask: “What are golf missions?!”. The idea is to solve the problem using as little code as theoretically possible. Your score is inversely related to code length and transforms a mildly challenging problem into a very addictive one.</p>

<p>One of the most interesting missions is called <a href="www.checkio.org/mission/ghost-detect/">Ghost Detect</a>. It might not seem special at first, but it gets tricky as solutions get shorter. The mission goal is to write the shortest possible code to recognize if three consecutive signals sent in binary are of the same length. 11000001100011 is a good signal while 111000100011 is a bad one. There is at least one zero between every group of ones. For each character used (less than 200) you earn 1 point. So, how do we do this?</p>

<!--more-->

<h4 id="use-regex-77-characters-123-points">1. Use regex (77 characters, 123 points)</h4>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
</pre></td><td class="code"><pre><code class="python"><span class="line"><span class="kn">import</span> <span class="nn">re</span>
</span><span class="line"><span class="n">recognize</span><span class="o">=</span><span class="k">lambda</span> <span class="n">t</span><span class="p">:</span><span class="nb">len</span><span class="p">(</span><span class="n">re</span><span class="o">.</span><span class="n">findall</span><span class="p">(</span><span class="s">r&#39;^0b(1+)0+\1{1}0+\1{1}$&#39;</span><span class="p">,</span><span class="nb">bin</span><span class="p">(</span><span class="n">t</span><span class="p">)))</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>We find and group zeros at the beginning, followed by at least one zero, and then find exactly one occurence of the first group, then some more zeros etc. Not too complicated, but only 123 points. Can we do better?</p>

<h4 id="use-the-sets-luke-63-characters-137-points">2. Use the sets, Luke (63 characters, 137 points)</h4>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
</pre></td><td class="code"><pre><code class="python"><span class="line"><span class="kn">import</span> <span class="nn">re</span>
</span><span class="line"><span class="n">recognize</span><span class="o">=</span><span class="k">lambda</span> <span class="n">w</span><span class="p">:</span><span class="nb">len</span><span class="p">(</span><span class="nb">set</span><span class="p">(</span><span class="n">re</span><span class="o">.</span><span class="n">findall</span><span class="p">(</span><span class="s">&#39;1+&#39;</span><span class="p">,</span><span class="nb">bin</span><span class="p">(</span><span class="n">w</span><span class="p">))))</span><span class="o">&lt;</span><span class="mi">2</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Here we combine regex and sets to check how many different groups of repeating ones are present in binary representation.</p>

<h4 id="ditch-the-regex-57-characters-143-points">3. Ditch the regex (57 characters, 143 points)</h4>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="python"><span class="line"><span class="n">recognize</span><span class="o">=</span><span class="k">lambda</span> <span class="n">x</span><span class="p">:</span><span class="nb">len</span><span class="p">(</span><span class="nb">set</span><span class="p">(</span><span class="nb">bin</span><span class="p">(</span><span class="n">x</span><span class="p">)[</span><span class="mi">2</span><span class="p">:]</span><span class="o">.</span><span class="n">split</span><span class="p">(</span><span class="s">&#39;0&#39;</span><span class="p">))</span><span class="o">-</span><span class="p">{</span><span class="s">&#39;&#39;</span><span class="p">})</span><span class="o">&lt;</span><span class="mi">2</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>This is about as far as a “Pythonic” road will take you. Split on zeros, convert to sets, remove empty set to avoid messing with the count and check if less than two.</p>

<h3 id="now-what">Now what?</h3>

<p>To further shorten it, we need to try a different approach - binary. In binary, when you multiply by 2, you shift all the bits one position to the left. So, for example, 00010 multiplied by 2 becomes 00100. A valid signal, according to the task, is a number with three groups of ones equally long with zeros inbetween. This actually means it’s made of a number multiplied by a power of two, then the same number was multiplied by some other power of two and added, and then the same number was added again. For example, $111000111000111$ is actually $111_2 \cdot 2^{12} + 111_2 \cdot 2^{6} + 111_2$.</p>

<p>Therefore, we can write a generalized form for such a number n being equal to</p>

<script type="math/tex; mode=display">n = k \cdot 2^{a} + k \cdot 2^{b} + k</script>

<script type="math/tex; mode=display">n = k \cdot (2^{a} + 2^{b} + 1) = k \cdot r</script>

<p>The number should, then, be divisible by both k and r without reminder. First variant that comes to mind is to test if n divided by k equals r. But we have neither k nor r, and the only thing we have to work with is the number given to our function. We have to think of a way to get the number using bit manipulation.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
</pre></td><td class="code"><pre><code class="python"><span class="line"><span class="n">n</span>       <span class="o">=</span> <span class="mi">111000111000111</span>
</span><span class="line"><span class="n">n</span><span class="o">+</span><span class="mi">1</span>     <span class="o">=</span> <span class="mi">111000111001000</span>
</span><span class="line"><span class="o">-------------------------</span> <span class="n">XOR</span>
</span><span class="line"><span class="n">n</span><span class="o">^</span><span class="n">n</span><span class="o">+</span><span class="mi">1</span>   <span class="o">=</span> <span class="mo">000000000001111</span>
</span><span class="line"><span class="n">n</span>       <span class="o">=</span> <span class="mi">111000111000111</span>
</span><span class="line"><span class="o">-------------------------</span> <span class="n">AND</span>
</span><span class="line"><span class="n">n</span><span class="o">&amp;</span><span class="n">n</span><span class="o">^</span><span class="n">n</span><span class="o">+</span><span class="mi">1</span> <span class="o">=</span> <span class="mo">000000000000111</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>So, now we have k with some bit tricks expressed like n AND n XOR n+1. To find r, we divide n by k and realize it’s basically the original number with sequences of ones reduced to a single 1. We can achieve this too with a little bit manipulation.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
</pre></td><td class="code"><pre><code class="python"><span class="line"><span class="n">n</span>       <span class="o">=</span>  <span class="mi">111000111000111</span>
</span><span class="line"><span class="n">n</span><span class="o">*</span><span class="mi">2</span>     <span class="o">=</span> <span class="mi">1110001110001110</span>
</span><span class="line"><span class="o">--------------------------</span> <span class="n">AND</span>
</span><span class="line"><span class="n">n</span><span class="o">&amp;</span><span class="n">n</span><span class="o">*</span><span class="mi">2</span>   <span class="o">=</span>  <span class="mi">110000110000110</span>
</span><span class="line"><span class="n">n</span>       <span class="o">=</span>  <span class="mi">111000111000111</span>
</span><span class="line"><span class="o">--------------------------</span> <span class="n">XOR</span>
</span><span class="line"><span class="mi">2</span><span class="o">*</span><span class="n">n</span><span class="o">&amp;</span><span class="n">n</span><span class="o">^</span><span class="n">n</span> <span class="o">=</span>    <span class="mi">1000001000001</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<h4 id="bit-banging">4. Bit banging:</h4>

<p>We are testing for this simple expression.</p>

<script type="math/tex; mode=display">\frac{n}{k} = r</script>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="python"><span class="line"><span class="n">recognize</span><span class="o">=</span><span class="k">lambda</span> <span class="n">n</span><span class="p">:</span><span class="n">n</span><span class="o">/</span><span class="p">(</span><span class="n">n</span><span class="o">&amp;</span><span class="n">n</span><span class="o">^</span><span class="n">n</span><span class="o">+</span><span class="mi">1</span><span class="p">)</span><span class="o">==</span><span class="mi">2</span><span class="o">*</span><span class="n">n</span><span class="o">&amp;</span><span class="n">n</span><span class="o">^</span><span class="n">n</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Down to 39 characters and 161 points. Can we do even better? Suprisingly, yes!</p>

<h4 id="getting-rid-of-k">5. Getting rid of k</h4>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="python"><span class="line"><span class="n">recognize</span><span class="o">=</span><span class="k">lambda</span> <span class="n">n</span><span class="p">:</span><span class="n">n</span><span class="o">%</span><span class="p">(</span><span class="mi">2</span><span class="o">*</span><span class="n">n</span><span class="o">&amp;</span><span class="n">n</span><span class="o">^</span><span class="n">n</span><span class="p">)</span><span class="o">==</span><span class="mi">0</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>If we test divisibility by k, it is easy to construct a number divisible by k which doesn’t satisfy the constraint - e.g. 110011110011. Therefore, we must test divisibility by the other factor, r. Since zeros between the ones are ensured by initial conditions, divisibility by r guarantees the required form.</p>

<p>Our solution is now only 33 characters long (function definition takes 19), and we scored 167 points. There is a trick to get 2 more points which I’m not going to disclose. Can you find it?</p>

<h4 id="can-we-go-above-169">Can we go above 169?</h4>

<p>I don’t think so, but please tell me if you think of a way! :) Hopefully you enjoyed reading about it as much as I’ve enjoyed solving it! If you have another, original solution to this problem feel free to email me and help my curiosity!</p>

<p>Cheers.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Cookie Math]]></title>
    <link href="https://blog.hrvoje.org/blog/2015/01/17/math-is-important-to-hackers/"/>
    <updated>2015-01-17T15:53:09+01:00</updated>
    <id>https://blog.hrvoje.org/blog/2015/01/17/math-is-important-to-hackers</id>
    <content type="html"><![CDATA[<p>There was a very interesting presentation at the last 31C3 conference given by
two very talented security researchers: Shahar Tal and Lior Oppenheim. The
vulnerability they found targets many different routers from various
manufacturers and was, apparently, patched 10 years ago (!) by the software
company who made RomPager, the software in question. Let’s just say vendors are
slow in deploying patches, leaving tens of millions of routers vulnerable to
potential remote bricking, turning into botnets or who knows what else. It was
named Misfortune Cookie for a good reason, but what does that have to do with
math?</p>

<!--more-->

<p>Apparently, there is a preallocated array in the webserver capable of
storing 10 cookies, 40 bytes each. The cookie number is used as array index -
converted to integer, multiplied by 40 and added to a memory address to read or
write the correct location without ever checking boundaries.</p>

<p>You can pass an arbitrary number and address any memory location relative to a
certain fixed point in memory. The only catch is that it gets multiplied by 40.
What can you do if you need better precision to avoid overwriting something
else near the memory location you are targeting?</p>

<p>This can be written in a form of <em>ax ≡ y (mod m)</em> and it’s called a <strong>Linear
Congruence</strong>. Obviously, <em>a</em> is 40 since we move in steps of 40. We need to find
such <em>x</em> that multiplied by 40 gives us a desired <em>y</em> modulo <em>m</em> we need to move in
memory relative to the present location. <em>M</em> is <script type="math/tex">2^{32}</script> (the size of a 32 bit
number could fit 0-4294967295, anything more than that and it will overflow and
start from zero again, just like a clock face starts from 1 when it reaches
12), making the equation 40 <em>x</em> ≡ <em>y</em> (mod <script type="math/tex">2^{32}</script>).</p>

<p>For this to have a solution, <em>x</em> needs to be divisible with the greatest common
divisor of both 40 and <script type="math/tex">2^{32}</script>, which is 8 - that’s how many unique
solutions we’ll get. Now we can say <script type="math/tex">z= \frac{y}{8}</script>, and reduce the expression to <em>5x
≡ z (mod 536870912)</em>. The way to solve it is to find the multiplicative
inverse modulo <em>m</em> - a number we can multiply both sides with so that it gives 1
when multiplied by 5 in this modular algebra.</p>

<script type="math/tex; mode=display">5^{-1} \pmod{536870912} \equiv 214748365</script>

<p>To get the other solutions, we need to keep adding the modulus value
(<em>536870912</em>) to the result and reduce when needed.  The referer is located at
<em>0x2e48</em> to the LEFT of the cookie array. Since we cannot go backwards, we would
like to add <em>0xffffd1b8</em> to overflow 32 bit number and end up at the desired
address.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
</pre></td><td class="code"><pre><code class="python"><span class="line"><span class="o">&gt;&gt;&gt;</span> <span class="k">def</span> <span class="nf">calc</span><span class="p">(</span><span class="n">a</span><span class="p">):</span> <span class="k">return</span> <span class="p">((</span><span class="n">a</span><span class="o">/</span><span class="mi">8</span><span class="p">)</span><span class="o">*</span><span class="mi">214748365</span><span class="p">)</span> <span class="o">%</span> <span class="p">(</span><span class="mi">1</span><span class="o">&lt;&lt;</span><span class="mi">32</span><span class="p">)</span>
</span><span class="line"><span class="o">&gt;&gt;&gt;</span> <span class="nb">sorted</span><span class="p">([(</span><span class="n">calc</span><span class="p">(</span><span class="nb">int</span><span class="p">(</span><span class="s">&#39;0xffffd1b8&#39;</span><span class="p">,</span><span class="mi">16</span><span class="p">))</span><span class="o">+</span><span class="n">i</span><span class="o">*</span><span class="mi">536870912</span><span class="p">)</span><span class="o">%</span><span class="p">(</span><span class="mi">1</span><span class="o">&lt;&lt;</span><span class="mi">32</span><span class="p">)</span> <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mi">8</span><span class="p">)])</span>
</span><span class="line"><span class="p">[</span><span class="mi">322122251</span><span class="p">,</span> <span class="mi">858993163</span><span class="p">,</span> <span class="mi">1395864075</span><span class="p">,</span> <span class="mi">1932734987</span><span class="p">,</span> <span class="mi">2469605899</span><span class="p">,</span> <span class="mi">3006476811</span><span class="p">,</span> <span class="mi">3543347723</span><span class="p">,</span> <span class="mi">4080218635</span><span class="p">]</span>
</span><span class="line">
</span><span class="line"><span class="c"># -- Let&#39;s do a check. </span>
</span><span class="line">
</span><span class="line"><span class="o">&gt;&gt;&gt;</span> <span class="nb">hex</span><span class="p">((</span><span class="mi">322122251</span><span class="o">*</span><span class="mi">40</span><span class="p">)</span> <span class="o">%</span> <span class="p">(</span><span class="mi">1</span><span class="o">&lt;&lt;</span><span class="mi">32</span><span class="p">))</span>
</span><span class="line"><span class="s">&#39;0xffffd1b8&#39;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Now let’s try it on my router!</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
</pre></td><td class="code"><pre><code class="html"><span class="line">send: &#39;GET / HTTP/1.1\r\nHost: 192.168.1.1:7547\r\nCookie: C322122251=/referer-test.html;\r\n\r\n&#39;
</span><span class="line">reply: &#39;HTTP/1.1 404 Not Found\r\n&#39;
</span><span class="line">header: Content-Type: text/html
</span><span class="line">header: Transfer-Encoding: chunked
</span><span class="line">header: Server: RomPager/4.07 UPnP/1.0
</span><span class="line">header: EXT:
</span><span class="line"><span class="nt">&lt;html&gt;</span>
</span><span class="line"><span class="nt">&lt;head&gt;</span>
</span><span class="line"><span class="nt">&lt;title&gt;</span>Object Not Found<span class="nt">&lt;/title&gt;&lt;/head&gt;&lt;body&gt;</span>
</span><span class="line"><span class="nt">&lt;h1&gt;</span>Object Not Found<span class="nt">&lt;/h1&gt;</span>The requested URL &#39;/&#39; was not found on the RomPager server.
</span><span class="line"><span class="nt">&lt;p&gt;</span>Return to <span class="nt">&lt;A</span> <span class="na">HREF=</span><span class="s">&quot;/referer-test.html&quot;</span><span class="nt">&gt;</span>last page<span class="nt">&lt;/A&gt;&lt;p&gt;</span>
</span><span class="line"><span class="nt">&lt;/body&gt;&lt;/html&gt;</span>        ^^^^^^^^^^^^^^^^^^
</span></code></pre></td></tr></table></div></figure></notextile></div>

<h3 id="is-there-another-way">Is there another way?</h3>

<p>It’s not necessary to find a general solution, sometimes thinking differently can work too.</p>

<script type="math/tex; mode=display">40\cdot x \equiv y\pmod{2^{32}}</script>

<p>How many additional bits can multiplying by 40 add to a number’s binary
representation? It’s between 32 (that’s <script type="math/tex">2^{5}</script>) and 64 (that’s <script type="math/tex">2^{6}</script>),
so we have to assume 6 bits. The question becomes, which number multiplied by
40 and with 6 most significant bits discarded is equal to our input variable
<em>y</em>? The router CPU might be stuck with 32 bits, but Python isn’t. Why not
simply reconstruct these discarded bits by testing each case?  Guess what the
discarded value might have been and divide by 40 to check if the assumption was
correct. For just 6 bits added, it isn’t terribly inefficient to check all
possibilities and it goes to prove there are many ways to address a problem.
Pun intended! :)</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
</pre></td><td class="code"><pre><code class="mathematica"><span class="line"><span class="w">  </span><span class="n">Start</span><span class="w"> </span><span class="n">with</span><span class="w"> </span><span class="mi">4294955448</span><span class="w"> </span><span class="n">in</span><span class="w"> </span><span class="n">binary</span><span class="w"> </span><span class="n">form</span><span class="err">.</span><span class="w"></span>
</span><span class="line"><span class="w">          </span><span class="mi">11111111111111111101000110111000</span><span class="w"></span>
</span><span class="line">
</span><span class="line"><span class="w">  </span><span class="n">Multiplying</span><span class="w"> </span><span class="n">by</span><span class="w"> </span><span class="mi">40</span><span class="w"> </span><span class="n">gives</span><span class="w"> </span><span class="mf">171798217920.</span><span class="w"> </span><span class="n">In</span><span class="w"> </span><span class="n">binary</span><span class="p">,</span><span class="w"> </span><span class="n">that</span><span class="err">&#39;</span><span class="n">s</span><span class="w"></span>
</span><span class="line"><span class="w">  </span><span class="mi">100111</span><span class="w">  </span><span class="mi">11111111111110001100010011000000</span><span class="w"></span>
</span><span class="line"><span class="w"> </span><span class="n">overflow</span><span class="w"></span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>The 100111 is simply too much to store in a 32 bit memory unit so it gets
discarded, and the rest we called <em>y</em>. We now need to do this in reverse,
starting from <em>y</em>, guessing the discarded part and checking if division by
40 gives the starting value. If it does - that’s it.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
</pre></td><td class="code"><pre><code class="python"><span class="line"><span class="n">t</span> <span class="o">=</span> <span class="nb">int</span><span class="p">(</span><span class="s">&#39;0xffffd1b8&#39;</span><span class="p">,</span> <span class="mi">16</span><span class="p">)</span>
</span><span class="line">
</span><span class="line"><span class="o">&gt;&gt;&gt;</span> <span class="p">[</span><span class="n">i</span> <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">map</span><span class="p">(</span><span class="k">lambda</span> <span class="n">a</span><span class="p">:</span> <span class="p">((</span><span class="n">a</span><span class="o">&lt;&lt;</span><span class="mi">32</span><span class="p">)</span><span class="o">+</span><span class="n">t</span><span class="p">)</span><span class="o">/</span><span class="mi">40</span><span class="p">,</span> <span class="nb">range</span><span class="p">(</span><span class="mi">64</span><span class="p">))</span> <span class="k">if</span> <span class="p">(</span><span class="n">i</span><span class="o">*</span><span class="mi">40</span><span class="p">)</span><span class="o">%</span><span class="p">(</span><span class="mi">1</span><span class="o">&lt;&lt;</span><span class="mi">32</span><span class="p">)</span><span class="o">==</span><span class="n">t</span> <span class="ow">and</span> <span class="n">i</span><span class="o">&lt;</span><span class="p">(</span><span class="mi">1</span><span class="o">&lt;&lt;</span><span class="mi">32</span><span class="p">)]</span>
</span><span class="line"><span class="p">[</span><span class="mi">322122251</span><span class="p">,</span> <span class="mi">858993163</span><span class="p">,</span> <span class="mi">1395864075</span><span class="p">,</span> <span class="mi">1932734987</span><span class="p">,</span> <span class="mi">2469605899</span><span class="p">,</span> <span class="mi">3006476811</span><span class="p">,</span> <span class="mi">3543347723</span><span class="p">,</span> <span class="mi">4080218635</span><span class="p">]</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>So the next time you complain learning math is silly when studying for a CS
degree, just remember you might actually need it!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Tic-Tac-Toe in ... MySQL]]></title>
    <link href="https://blog.hrvoje.org/blog/2014/10/05/tic-tac-toe-in-dot-dot-dot-mysql/"/>
    <updated>2014-10-05T17:25:44+02:00</updated>
    <id>https://blog.hrvoje.org/blog/2014/10/05/tic-tac-toe-in-dot-dot-dot-mysql</id>
    <content type="html"><![CDATA[<p>If you ever attended a boring lecture, you probably know this game by heart. Frequently scribbled on textbook margins and school desks, it’s insanely popular and fun to play. Talking to a friend about MySQL made me wonder if such a respectable, high performance database can be misused and tricked into being a gaming platfom. While it isn’t likely going to run Quake, maybe a simple game of Tic-Tac-Toe would be just right.</p>

<p>Why would anyone do this? Well, making <a href="https://www.youtube.com/watch?v=qWkUFxItWmU">floppy drives play The Imperial March</a> isn’t very useful either, but it’s darn entertaining. MySQL is a powerful tool with strong scripting capabilities and Turing complete as well, so implementing this game in a single player mode is possible.</p>

<!--more-->

<h3 id="implementation">Implementation</h3>

<p>First, we need a board. To keep things simple, we’ll keep it as a 9 letter string - matrix element with position (1,1) will be the first element, then element (1,2) and so on .</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="mysql"><span class="line"><span class="kt">SET</span> <span class="o">@</span><span class="n">ploca</span> <span class="o">=</span> <span class="s1">&#39;_________&#39;</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>After defining something to store and describe the board in, we declare AI is using ‘o’ and the player will be playing with ‘x’. Underscores are used to represent unclaimed fields. Since MySQL isn’t Perl or Python, we’ll have to improvise a little and create a function to check what’s placed on the board at a specific (row,column) position.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="mysql"><span class="line"><span class="k">CREATE</span> <span class="n">FUNCTION</span> <span class="nf">get</span><span class="p">(</span><span class="n">instring</span> <span class="kt">VARCHAR</span><span class="p">(</span><span class="mi">255</span><span class="p">),</span> <span class="n">y</span> <span class="kt">INT</span><span class="p">,</span> <span class="n">x</span> <span class="kt">INT</span><span class="p">)</span> <span class="n">RETURNS</span> <span class="kt">CHAR</span><span class="p">(</span><span class="mi">1</span><span class="p">)</span> <span class="k">RETURN</span> <span class="nf">SUBSTRING</span><span class="p">(</span><span class="n">instring</span><span class="p">,</span> <span class="mi">3</span><span class="o">*</span><span class="p">(</span><span class="n">y</span><span class="o">-</span><span class="mi">1</span><span class="p">)</span><span class="o">+</span><span class="n">x</span><span class="p">,</span> <span class="mi">1</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Now we need to think of a way to display the board to the player. There is no simple print function and we are trying to display a string as a table, so this is what I could think of.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
</pre></td><td class="code"><pre><code class="mysql"><span class="line"><span class="n">DELIMITER</span> <span class="err">$$</span>
</span><span class="line"><span class="k">CREATE</span> <span class="k">PROCEDURE</span> <span class="nf">display_board</span><span class="p">(</span><span class="k">IN</span> <span class="n">l</span> <span class="kt">VARCHAR</span><span class="p">(</span><span class="mi">16</span><span class="p">))</span>
</span><span class="line"><span class="n">BEGIN</span>
</span><span class="line">      <span class="k">DROP</span> <span class="n">TEMPORARY</span> <span class="k">TABLE</span> <span class="k">IF</span> <span class="k">EXISTS</span> <span class="ss">`tablica`</span><span class="p">;</span>
</span><span class="line">      <span class="k">CREATE</span> <span class="n">TEMPORARY</span> <span class="k">TABLE</span> <span class="ss">`tablica`</span> <span class="p">(</span><span class="n">ta</span> <span class="kt">varchar</span><span class="p">(</span><span class="mi">1</span><span class="p">),</span> <span class="n">bli</span> <span class="kt">varchar</span><span class="p">(</span><span class="mi">1</span><span class="p">),</span> <span class="n">ca</span> <span class="kt">varchar</span><span class="p">(</span><span class="mi">1</span><span class="p">));</span>
</span><span class="line">      <span class="k">INSERT</span> <span class="k">INTO</span> <span class="n">tablica</span> <span class="k">VALUES</span> <span class="p">(</span><span class="nf">get</span><span class="p">(</span><span class="n">l</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span><span class="mi">1</span><span class="p">),</span> <span class="nf">get</span><span class="p">(</span><span class="n">l</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span><span class="mi">2</span><span class="p">),</span> <span class="nf">get</span><span class="p">(</span><span class="n">l</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span><span class="mi">3</span><span class="p">));</span>
</span><span class="line">      <span class="k">INSERT</span> <span class="k">INTO</span> <span class="n">tablica</span> <span class="k">VALUES</span> <span class="p">(</span><span class="nf">get</span><span class="p">(</span><span class="n">l</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span><span class="mi">1</span><span class="p">),</span> <span class="nf">get</span><span class="p">(</span><span class="n">l</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span><span class="mi">2</span><span class="p">),</span> <span class="nf">get</span><span class="p">(</span><span class="n">l</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span><span class="mi">3</span><span class="p">));</span>
</span><span class="line">      <span class="k">INSERT</span> <span class="k">INTO</span> <span class="n">tablica</span> <span class="k">VALUES</span> <span class="p">(</span><span class="nf">get</span><span class="p">(</span><span class="n">l</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span><span class="mi">1</span><span class="p">),</span> <span class="nf">get</span><span class="p">(</span><span class="n">l</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span><span class="mi">2</span><span class="p">),</span> <span class="nf">get</span><span class="p">(</span><span class="n">l</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span><span class="mi">3</span><span class="p">));</span>
</span><span class="line">      <span class="k">SELECT</span> <span class="o">*</span> <span class="k">from</span> <span class="n">tablica</span><span class="p">;</span>
</span><span class="line"><span class="n">END</span>
</span><span class="line"><span class="err">$$</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>We declare a temporary table, extract characters from our board-string and select it. This will print it (somewhat) nicely to the player.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
</pre></td><td class="code"><pre><code class="mysql"><span class="line"><span class="o">+------+------+------+</span>
</span><span class="line"><span class="o">|</span> <span class="n">ta</span>   <span class="o">|</span> <span class="n">bli</span>  <span class="o">|</span> <span class="n">ca</span>   <span class="o">|</span>
</span><span class="line"><span class="o">+------+------+------+</span>
</span><span class="line"><span class="o">|</span> <span class="n">o</span>    <span class="o">|</span> <span class="n">_</span>    <span class="o">|</span> <span class="n">_</span>    <span class="o">|</span>
</span><span class="line"><span class="o">|</span> <span class="n">_</span>    <span class="o">|</span> <span class="n">x</span>    <span class="o">|</span> <span class="n">_</span>    <span class="o">|</span>
</span><span class="line"><span class="o">|</span> <span class="n">_</span>    <span class="o">|</span> <span class="n">_</span>    <span class="o">|</span> <span class="n">_</span>    <span class="o">|</span>
</span><span class="line"><span class="o">+------+------+------+</span>
</span><span class="line"><span class="mi">3</span> <span class="n">rows</span> <span class="k">in</span> <span class="kt">set</span> <span class="p">(</span><span class="mi">0</span><span class="p">.</span><span class="mi">02</span> <span class="n">sec</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<h3 id="ai---making-a-respectable-oponent">AI - making a respectable oponent</h3>

<p>This is a good time to talk about the AI. Taking the classic approach isn’t something you do when coding for fun, so I decided to do something different. When doing something weird in a database engine, why not use it in your advantage? Basic combinatorics tells us each field can be either ‘o’, ‘x’ or empty, and there are 9 fields so that’s 3<sup>9</sup> = 19,683 possible board positions. Also, many positions are invalid - you can’t have all x’s because players take turns, you can’t play after you’ve lost etc. so the real number of valid board is much smaller (it’s 5477).</p>

<p>Game theory teaches us Tic-Tac-Toe can never actually be won if you pick optimal moves, so we’ll run it once to generate a tree of best computer moves given a certain position, store it permanently in the database, and use it to defeat the puny human.</p>

<p><img class="center" src="https://blog.hrvoje.org/images/Tic-tac-toe-game-tree.svg" /></p>

<p>Each optimal move for a certain position will be stored as a table row along with its predecessor’s id, so we can look it up and know where to move.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
</pre></td><td class="code"><pre><code class="mysql"><span class="line"><span class="o">+-------+-----------+------------+------+------+--------+</span>
</span><span class="line"><span class="o">|</span> <span class="n">id</span>    <span class="o">|</span> <span class="n">matrix</span>    <span class="o">|</span> <span class="n">moves_next</span> <span class="o">|</span> <span class="n">kraj</span> <span class="o">|</span> <span class="n">win</span>  <span class="o">|</span> <span class="n">parent</span> <span class="o">|</span>
</span><span class="line"><span class="o">+-------+-----------+------------+------+------+--------+</span>
</span><span class="line"><span class="o">|</span> <span class="mi">32041</span> <span class="o">|</span> <span class="n">oxooxxo_x</span> <span class="o">|</span> <span class="n">x</span>          <span class="o">|</span>    <span class="mi">1</span> <span class="o">|</span> <span class="n">o</span>    <span class="o">|</span>  <span class="mi">32040</span> <span class="o">|</span>
</span><span class="line"><span class="o">+-------+-----------+------------+------+------+--------+</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>An example of a move stored in a database - this is a finished game which a computer (‘o’ player) won. Let’s implement a function for making a move.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
</pre></td><td class="code"><pre><code class="mysql"><span class="line"><span class="n">DELIMITER</span> <span class="err">$$</span>
</span><span class="line"><span class="k">CREATE</span> <span class="k">PROCEDURE</span> <span class="nf">place_x</span><span class="p">(</span><span class="k">IN</span> <span class="n">y</span> <span class="kt">INT</span><span class="p">,</span> <span class="k">IN</span> <span class="n">x</span> <span class="kt">INT</span><span class="p">)</span>
</span><span class="line"><span class="n">BEGIN</span>
</span><span class="line">      <span class="k">IF</span> <span class="nf">get</span><span class="p">(</span><span class="o">@</span><span class="n">ploca</span><span class="p">,</span> <span class="n">y</span><span class="p">,</span> <span class="n">x</span><span class="p">)</span> <span class="o">=</span> <span class="s1">&#39;_&#39;</span> <span class="k">THEN</span>
</span><span class="line">    <span class="k">SELECT</span> <span class="nf">concat</span><span class="p">(</span><span class="nf">substring</span><span class="p">(</span><span class="o">@</span><span class="n">ploca</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">3</span><span class="o">*</span><span class="p">(</span><span class="n">y</span><span class="o">-</span><span class="mi">1</span><span class="p">)</span><span class="o">+</span><span class="n">x</span><span class="o">-</span><span class="mi">1</span><span class="p">),</span> <span class="s1">&#39;x&#39;</span><span class="p">,</span> <span class="nf">substring</span><span class="p">(</span><span class="o">@</span><span class="n">ploca</span><span class="p">,</span> <span class="mi">3</span><span class="o">*</span><span class="p">(</span><span class="n">y</span><span class="o">-</span><span class="mi">1</span><span class="p">)</span><span class="o">+</span><span class="n">x</span><span class="o">+</span><span class="mi">1</span><span class="p">))</span> <span class="k">INTO</span> <span class="o">@</span><span class="n">ploca</span><span class="p">;</span>
</span><span class="line">    <span class="k">CALL</span> <span class="nf">display_board</span><span class="p">(</span><span class="o">@</span><span class="n">ploca</span><span class="p">);</span>
</span><span class="line">
</span><span class="line">        <span class="k">SELECT</span> <span class="n">id</span><span class="p">,</span><span class="n">kraj</span><span class="p">,</span><span class="n">win</span> <span class="k">FROM</span> <span class="n">tictactoe</span> <span class="k">WHERE</span> <span class="n">matrix</span><span class="o">=@</span><span class="n">ploca</span> <span class="k">AND</span> <span class="n">moves_next</span><span class="o">=</span><span class="s1">&#39;o&#39;</span> <span class="k">LIMIT</span> <span class="mi">1</span> <span class="k">INTO</span> <span class="o">@</span><span class="n">parent_id</span><span class="p">,</span> <span class="o">@</span><span class="n">kraj</span><span class="p">,</span> <span class="o">@</span><span class="n">win</span><span class="p">;</span>
</span><span class="line">        <span class="k">SELECT</span> <span class="n">matrix</span><span class="p">,</span><span class="n">kraj</span><span class="p">,</span><span class="n">win</span> <span class="k">FROM</span> <span class="n">tictactoe</span> <span class="k">WHERE</span> <span class="n">parent</span><span class="o">=@</span><span class="n">parent_id</span> <span class="k">LIMIT</span> <span class="mi">1</span> <span class="k">INTO</span> <span class="o">@</span><span class="n">ploca</span><span class="p">,</span> <span class="o">@</span><span class="n">kraj</span><span class="p">,</span> <span class="o">@</span><span class="n">win</span><span class="p">;</span>
</span><span class="line">
</span><span class="line">    <span class="k">CALL</span> <span class="nf">display_board</span><span class="p">(</span><span class="o">@</span><span class="n">ploca</span><span class="p">);</span>
</span><span class="line">
</span><span class="line">    <span class="k">IF</span> <span class="o">@</span><span class="n">kraj</span> <span class="o">=</span> <span class="mi">1</span> <span class="k">THEN</span>
</span><span class="line">      <span class="k">IF</span> <span class="o">@</span><span class="n">win</span> <span class="o">=</span> <span class="s1">&#39;o&#39;</span> <span class="k">THEN</span> <span class="k">SELECT</span> <span class="s1">&#39;Izgubili ste!&#39;</span> <span class="k">AS</span> <span class="s1">&#39; &#39;</span><span class="p">;</span> <span class="k">ELSE</span>  <span class="k">SELECT</span> <span class="s1">&#39;Nerijeseno. Pokusajte ponovno!&#39;</span> <span class="k">AS</span> <span class="s1">&#39; &#39;</span><span class="p">;</span> <span class="n">END</span> <span class="k">IF</span><span class="p">;</span>
</span><span class="line">      <span class="kt">SET</span> <span class="o">@</span><span class="n">ploca</span> <span class="o">=</span> <span class="s1">&#39;_________&#39;</span><span class="p">;</span>
</span><span class="line">      <span class="k">CALL</span> <span class="nf">display_board</span><span class="p">(</span><span class="o">@</span><span class="n">ploca</span><span class="p">);</span>
</span><span class="line">    <span class="n">END</span> <span class="k">IF</span><span class="p">;</span>
</span><span class="line">      <span class="n">END</span> <span class="k">IF</span><span class="p">;</span>
</span><span class="line"><span class="n">END</span>
</span><span class="line"><span class="err">$$</span>
</span><span class="line"><span class="n">DELIMITER</span> <span class="p">;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<h3 id="constructing-the-optimal-move-tree">Constructing the optimal move tree</h3>

<p>If you ever saw Wargames, you probably remember the scene where the kid saves the world by making the computer play Tic-Tac-Toe with itself. The same thing is done here (minus saving the world part). Computer plays both sides, but when impersonating a human it checks all moves, not just the best one, because a human might make a mistake. To determine the best move, a recursive minimax algorithm is used, checking long-term consequence of a move (‘move’ function) and choosing the one with a best outcome.</p>

<p>This python algorithm is ran only once; it recursively traverses the moves tree and inserts nodes as database rows. Our database could also be imported from external file, effectively eliminating any external dependencies, even if they are only a one-time thing. A single database row also contains state flags to determine if the game is over or not.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
<span class="line-number">22</span>
<span class="line-number">23</span>
<span class="line-number">24</span>
<span class="line-number">25</span>
<span class="line-number">26</span>
<span class="line-number">27</span>
<span class="line-number">28</span>
<span class="line-number">29</span>
<span class="line-number">30</span>
<span class="line-number">31</span>
<span class="line-number">32</span>
<span class="line-number">33</span>
<span class="line-number">34</span>
<span class="line-number">35</span>
<span class="line-number">36</span>
<span class="line-number">37</span>
<span class="line-number">38</span>
<span class="line-number">39</span>
<span class="line-number">40</span>
<span class="line-number">41</span>
<span class="line-number">42</span>
<span class="line-number">43</span>
<span class="line-number">44</span>
<span class="line-number">45</span>
<span class="line-number">46</span>
<span class="line-number">47</span>
<span class="line-number">48</span>
<span class="line-number">49</span>
<span class="line-number">50</span>
<span class="line-number">51</span>
<span class="line-number">52</span>
<span class="line-number">53</span>
<span class="line-number">54</span>
<span class="line-number">55</span>
<span class="line-number">56</span>
<span class="line-number">57</span>
<span class="line-number">58</span>
<span class="line-number">59</span>
<span class="line-number">60</span>
<span class="line-number">61</span>
<span class="line-number">62</span>
<span class="line-number">63</span>
<span class="line-number">64</span>
<span class="line-number">65</span>
<span class="line-number">66</span>
</pre></td><td class="code"><pre><code class="python"><span class="line"><span class="c">#!/usr/bin/python</span>
</span><span class="line"><span class="kn">import</span> <span class="nn">itertools</span><span class="o">,</span> <span class="nn">hashlib</span><span class="o">,</span> <span class="nn">MySQLdb</span>
</span><span class="line">
</span><span class="line"><span class="n">ploca</span> <span class="o">=</span> <span class="nb">list</span><span class="p">(</span><span class="s">&#39;_&#39;</span> <span class="o">*</span> <span class="mi">9</span><span class="p">)</span>
</span><span class="line"><span class="n">db</span><span class="o">=</span><span class="n">MySQLdb</span><span class="o">.</span><span class="n">connect</span><span class="p">(</span><span class="s">&#39;localhost&#39;</span><span class="p">,</span> <span class="s">&#39;game&#39;</span><span class="p">,</span> <span class="s">&#39;game&#39;</span><span class="p">,</span> <span class="s">&#39;game&#39;</span><span class="p">)</span>
</span><span class="line"><span class="n">c</span><span class="o">=</span><span class="n">db</span><span class="o">.</span><span class="n">cursor</span><span class="p">()</span>
</span><span class="line">
</span><span class="line"><span class="k">def</span> <span class="nf">move</span><span class="p">(</span><span class="n">ploca</span><span class="p">,</span> <span class="n">player</span><span class="p">):</span>
</span><span class="line">    <span class="k">if</span> <span class="nb">len</span><span class="p">(</span><span class="nb">set</span><span class="p">(</span><span class="n">ploca</span><span class="p">))</span> <span class="o">==</span> <span class="mi">1</span><span class="p">:</span> <span class="k">return</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">4</span>
</span><span class="line">    <span class="n">nextplayer</span> <span class="o">=</span> <span class="s">&#39;x&#39;</span> <span class="k">if</span> <span class="n">player</span> <span class="ow">is</span> <span class="s">&#39;o&#39;</span> <span class="k">else</span> <span class="s">&#39;o&#39;</span>
</span><span class="line">    <span class="k">if</span> <span class="n">pobjednik</span><span class="p">(</span><span class="n">ploca</span><span class="p">):</span>
</span><span class="line">        <span class="k">return</span> <span class="p">(</span><span class="o">-</span><span class="mi">1</span><span class="p">,</span> <span class="o">-</span><span class="mi">1</span><span class="p">)</span> <span class="k">if</span> <span class="n">player</span> <span class="ow">is</span> <span class="s">&#39;x&#39;</span> <span class="k">else</span> <span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="o">-</span><span class="mi">1</span><span class="p">)</span>
</span><span class="line">
</span><span class="line">    <span class="n">reslist</span> <span class="o">=</span> <span class="p">[]</span>
</span><span class="line">    <span class="n">lista</span> <span class="o">=</span> <span class="p">[]</span>
</span><span class="line">
</span><span class="line">    <span class="k">if</span> <span class="n">provjeri_kraj</span><span class="p">(</span><span class="n">ploca</span><span class="p">):</span> <span class="k">return</span> <span class="mi">0</span><span class="p">,</span> <span class="o">-</span><span class="mi">1</span>
</span><span class="line">    <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mi">9</span><span class="p">):</span>
</span><span class="line">        <span class="k">if</span> <span class="n">ploca</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">==</span> <span class="s">&#39;_&#39;</span><span class="p">:</span> <span class="n">lista</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="n">i</span><span class="p">)</span>
</span><span class="line">
</span><span class="line">    <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="n">lista</span><span class="p">:</span>
</span><span class="line">        <span class="n">ploca</span><span class="p">[</span><span class="n">i</span><span class="p">]</span><span class="o">=</span><span class="n">player</span>
</span><span class="line">        <span class="n">ret</span><span class="p">,</span><span class="n">mov</span><span class="o">=</span><span class="n">move</span><span class="p">(</span><span class="n">ploca</span><span class="p">,</span> <span class="n">nextplayer</span><span class="p">)</span>
</span><span class="line">        <span class="n">reslist</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="n">ret</span><span class="p">)</span>
</span><span class="line">        <span class="n">ploca</span><span class="p">[</span><span class="n">i</span><span class="p">]</span><span class="o">=</span><span class="s">&#39;_&#39;</span>
</span><span class="line">
</span><span class="line">    <span class="k">if</span> <span class="n">player</span> <span class="ow">is</span> <span class="s">&#39;x&#39;</span><span class="p">:</span> <span class="k">return</span> <span class="nb">max</span><span class="p">(</span><span class="n">reslist</span><span class="p">),</span><span class="n">lista</span><span class="p">[</span><span class="n">reslist</span><span class="o">.</span><span class="n">index</span><span class="p">(</span><span class="nb">max</span><span class="p">(</span><span class="n">reslist</span><span class="p">))]</span>
</span><span class="line">    <span class="k">else</span><span class="p">:</span> <span class="k">return</span> <span class="nb">min</span><span class="p">(</span><span class="n">reslist</span><span class="p">),</span><span class="n">lista</span><span class="p">[</span><span class="n">reslist</span><span class="o">.</span><span class="n">index</span><span class="p">(</span><span class="nb">min</span><span class="p">(</span><span class="n">reslist</span><span class="p">))]</span>
</span><span class="line">
</span><span class="line"><span class="k">def</span> <span class="nf">moguci_potezi</span><span class="p">(</span><span class="n">ploca</span><span class="p">):</span> <span class="k">return</span> <span class="p">[</span><span class="n">i</span> <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">zip</span><span class="p">(</span><span class="nb">range</span><span class="p">(</span><span class="mi">9</span><span class="p">),</span> <span class="n">ploca</span><span class="p">)</span> <span class="k">if</span> <span class="n">i</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span> <span class="ow">is</span> <span class="s">&#39;_&#39;</span><span class="p">]</span>
</span><span class="line"><span class="k">def</span> <span class="nf">provjeri_kraj</span><span class="p">(</span><span class="n">ploca</span><span class="p">):</span> <span class="k">return</span> <span class="bp">True</span> <span class="k">if</span> <span class="ow">not</span> <span class="nb">len</span><span class="p">(</span><span class="n">moguci_potezi</span><span class="p">(</span><span class="n">ploca</span><span class="p">))</span> <span class="k">else</span> <span class="bp">False</span>
</span><span class="line"><span class="k">def</span> <span class="nf">igraceva_polja</span><span class="p">(</span><span class="n">igrac</span><span class="p">,</span> <span class="n">ploca</span><span class="p">):</span> <span class="k">return</span> <span class="p">[</span><span class="n">i</span> <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">zip</span><span class="p">(</span><span class="nb">range</span><span class="p">(</span><span class="mi">9</span><span class="p">),</span> <span class="n">ploca</span><span class="p">)</span> <span class="k">if</span> <span class="n">i</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span> <span class="o">==</span> <span class="n">igrac</span><span class="p">]</span>
</span><span class="line"><span class="k">def</span> <span class="nf">nerijeseno</span><span class="p">(</span><span class="n">ploca</span><span class="p">):</span>  <span class="k">return</span> <span class="bp">True</span> <span class="k">if</span> <span class="n">provjeri_kraj</span><span class="p">(</span><span class="n">ploca</span><span class="p">)</span> <span class="ow">and</span> <span class="ow">not</span> <span class="n">pobjednik</span><span class="p">(</span><span class="n">ploca</span><span class="p">)</span> <span class="k">else</span> <span class="bp">False</span>
</span><span class="line">
</span><span class="line"><span class="k">def</span> <span class="nf">pobjednik</span><span class="p">(</span><span class="n">ploca</span><span class="p">):</span>
</span><span class="line">    <span class="n">dobitne_mogucnosti</span> <span class="o">=</span> <span class="p">([</span><span class="mi">0</span><span class="p">,</span><span class="mi">1</span><span class="p">,</span><span class="mi">2</span><span class="p">],</span> <span class="p">[</span><span class="mi">3</span><span class="p">,</span><span class="mi">4</span><span class="p">,</span><span class="mi">5</span><span class="p">],</span> <span class="p">[</span><span class="mi">6</span><span class="p">,</span><span class="mi">7</span><span class="p">,</span><span class="mi">8</span><span class="p">],</span> <span class="p">[</span><span class="mi">0</span><span class="p">,</span><span class="mi">3</span><span class="p">,</span><span class="mi">6</span><span class="p">],</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span><span class="mi">4</span><span class="p">,</span><span class="mi">7</span><span class="p">],</span> <span class="p">[</span><span class="mi">2</span><span class="p">,</span><span class="mi">5</span><span class="p">,</span><span class="mi">8</span><span class="p">],</span> <span class="p">[</span><span class="mi">2</span><span class="p">,</span><span class="mi">4</span><span class="p">,</span><span class="mi">6</span><span class="p">],</span> <span class="p">[</span><span class="mi">0</span><span class="p">,</span><span class="mi">4</span><span class="p">,</span><span class="mi">8</span><span class="p">])</span>
</span><span class="line">    <span class="k">for</span> <span class="n">strana</span> <span class="ow">in</span> <span class="p">(</span><span class="s">&#39;x&#39;</span><span class="p">,</span> <span class="s">&#39;o&#39;</span><span class="p">):</span>
</span><span class="line">        <span class="k">if</span> <span class="p">[</span><span class="nb">len</span><span class="p">([</span><span class="n">ploca</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="n">j</span> <span class="k">if</span> <span class="n">ploca</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="ow">is</span> <span class="n">strana</span><span class="p">])</span> <span class="k">for</span> <span class="n">j</span> <span class="ow">in</span> <span class="n">dobitne_mogucnosti</span><span class="p">]</span><span class="o">.</span><span class="n">count</span><span class="p">(</span><span class="mi">3</span><span class="p">):</span> <span class="k">return</span> <span class="n">strana</span>
</span><span class="line">    <span class="k">return</span> <span class="bp">False</span>
</span><span class="line">
</span><span class="line"><span class="k">def</span> <span class="nf">povuci_potez</span><span class="p">(</span><span class="n">ploca</span><span class="p">,</span> <span class="n">strana</span><span class="p">,</span> <span class="n">parent</span><span class="p">):</span>
</span><span class="line">    <span class="n">win</span> <span class="o">=</span> <span class="s">&#39;NULL&#39;</span>
</span><span class="line">    <span class="n">tbl</span> <span class="o">=</span> <span class="p">[</span><span class="s">&#39;&#39;</span><span class="o">.</span><span class="n">join</span><span class="p">(</span><span class="n">ploca</span><span class="p">),</span> <span class="n">strana</span><span class="p">]</span>
</span><span class="line">
</span><span class="line">    <span class="n">kraj</span> <span class="o">=</span> <span class="mi">1</span> <span class="k">if</span> <span class="n">nerijeseno</span><span class="p">(</span><span class="n">ploca</span><span class="p">)</span> <span class="ow">or</span> <span class="n">pobjednik</span><span class="p">(</span><span class="n">ploca</span><span class="p">)</span> <span class="k">else</span> <span class="mi">0</span>
</span><span class="line">    <span class="k">if</span> <span class="n">kraj</span><span class="p">:</span> <span class="n">win</span> <span class="o">=</span> <span class="n">pobjednik</span><span class="p">(</span><span class="n">ploca</span><span class="p">)</span> <span class="k">if</span> <span class="n">pobjednik</span><span class="p">(</span><span class="n">ploca</span><span class="p">)</span> <span class="k">else</span> <span class="s">&#39;Tie&#39;</span>
</span><span class="line">
</span><span class="line">    <span class="n">tbl</span><span class="o">.</span><span class="n">extend</span><span class="p">([</span><span class="n">win</span><span class="p">,</span> <span class="nb">str</span><span class="p">(</span><span class="n">kraj</span><span class="p">)])</span>
</span><span class="line">    <span class="n">c</span><span class="o">.</span><span class="n">execute</span><span class="p">(</span><span class="s">&quot;INSERT INTO tictactoe (matrix, moves_next, win, kraj) VALUES (&#39;{}&#39;);&quot;</span><span class="o">.</span><span class="n">format</span><span class="p">(</span><span class="s">&quot;&#39;, &#39;&quot;</span><span class="o">.</span><span class="n">join</span><span class="p">(</span><span class="n">tbl</span><span class="p">)))</span>
</span><span class="line">    <span class="n">lastrowid</span> <span class="o">=</span> <span class="n">c</span><span class="o">.</span><span class="n">lastrowid</span>
</span><span class="line">    <span class="n">db</span><span class="o">.</span><span class="n">commit</span><span class="p">()</span>
</span><span class="line">
</span><span class="line">    <span class="k">if</span> <span class="n">parent</span> <span class="ow">is</span> <span class="ow">not</span> <span class="s">&#39;NULL&#39;</span><span class="p">:</span> <span class="n">c</span><span class="o">.</span><span class="n">execute</span><span class="p">(</span><span class="s">&quot;UPDATE tictactoe SET parent=&#39;{0}&#39; WHERE id=&#39;{1}&#39;&quot;</span><span class="o">.</span><span class="n">format</span><span class="p">(</span><span class="n">parent</span><span class="p">,</span> <span class="n">lastrowid</span><span class="p">))</span>
</span><span class="line">    <span class="k">if</span> <span class="n">pobjednik</span><span class="p">(</span><span class="n">ploca</span><span class="p">)</span> <span class="ow">or</span> <span class="n">nerijeseno</span><span class="p">(</span><span class="n">ploca</span><span class="p">):</span> <span class="k">return</span>
</span><span class="line">
</span><span class="line">    <span class="n">slobodna_polja</span> <span class="o">=</span> <span class="n">moguci_potezi</span><span class="p">(</span><span class="n">ploca</span><span class="p">)</span>
</span><span class="line">    <span class="k">if</span> <span class="n">strana</span> <span class="o">==</span> <span class="s">&#39;x&#39;</span><span class="p">:</span>
</span><span class="line">        <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="n">slobodna_polja</span><span class="p">:</span>
</span><span class="line">            <span class="n">ploca_recursive</span><span class="o">=</span><span class="n">ploca</span><span class="p">[:]</span>
</span><span class="line">            <span class="n">ploca_recursive</span><span class="p">[</span><span class="n">i</span><span class="p">[</span><span class="mi">0</span><span class="p">]]</span> <span class="o">=</span> <span class="s">&#39;x&#39;</span>
</span><span class="line">            <span class="n">povuci_potez</span><span class="p">(</span><span class="n">ploca_recursive</span><span class="p">,</span> <span class="s">&#39;o&#39;</span><span class="p">,</span> <span class="n">lastrowid</span><span class="p">)</span>
</span><span class="line">    <span class="k">else</span><span class="p">:</span>
</span><span class="line">        <span class="n">ploca</span><span class="p">[</span><span class="n">move</span><span class="p">(</span><span class="n">ploca</span><span class="p">,</span> <span class="s">&#39;o&#39;</span><span class="p">)[</span><span class="mi">1</span><span class="p">]]</span> <span class="o">=</span> <span class="s">&#39;o&#39;</span>
</span><span class="line">        <span class="n">povuci_potez</span><span class="p">(</span><span class="n">ploca</span><span class="p">,</span> <span class="s">&#39;x&#39;</span><span class="p">,</span> <span class="n">lastrowid</span><span class="p">)</span>
</span><span class="line">
</span><span class="line"><span class="n">povuci_potez</span><span class="p">(</span><span class="n">ploca</span><span class="p">,</span> <span class="s">&#39;x&#39;</span><span class="p">,</span> <span class="s">&#39;NULL&#39;</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<h3 id="making-it-fancy">Making it fancy</h3>

<p>That’s all nice, it works, but one more thing… can we make it 3D, just for fun? Mysql can execute shell commands, but apparently you can’t pipe anything through shell scripts. Let’s use a trick - very often it produces long, long tables, and to facilitate looking at the data you can set a <em>pager</em> - something it will pipe your output through, like <em>less</em> or your favorite editor. Why not using that and piping it through … figlet! One apt-get install figlet later, finding a cool looking 3d font and a little sed to strip everything not important and we’re left with this.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
</pre></td><td class="code"><pre><code class="mysql"><span class="line"><span class="n">mysql</span><span class="o">&gt;</span> <span class="n">pager</span> <span class="n">sed</span> <span class="o">-</span><span class="n">e</span> <span class="s1">&#39;s/| ta   | bli  | ca   |//g&#39;</span> <span class="o">-</span><span class="n">e</span> <span class="s1">&#39;s/  \+/ /g&#39;</span> <span class="o">-</span><span class="n">e</span> <span class="s1">&#39;s/[+\-]//g&#39;</span> <span class="o">-</span><span class="n">e</span> <span class="s1">&#39;/^$/d&#39;</span> <span class="o">|</span> <span class="n">figlet</span> <span class="o">-</span><span class="n">f</span> <span class="s1">&#39;larry3d.flf&#39;</span>
</span><span class="line"><span class="n">mysql</span><span class="o">&gt;</span> <span class="k">call</span> <span class="nf">place_x</span><span class="p">(</span><span class="mi">2</span><span class="p">,</span><span class="mi">3</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
<span class="line-number">22</span>
<span class="line-number">23</span>
<span class="line-number">24</span>
<span class="line-number">25</span>
<span class="line-number">26</span>
<span class="line-number">27</span>
</pre></td><td class="code"><pre><code class=""><span class="line"> __                  __                  __                   __       
</span><span class="line">/\ \                /\ \                /\ \                 /\ \      
</span><span class="line">\ \ \        ___    \ \ \       __  _   \ \ \                \ \ \     
</span><span class="line"> \ \ \      / __`\   \ \ \     /\ \/'\   \ \ \                \ \ \    
</span><span class="line">  \ \ \    /\ \L\ \   \ \ \    \/&gt;  &lt;/    \ \ \                \ \ \   
</span><span class="line">   \ \ \   \ \____/    \ \ \    /\_/\_\    \ \ \                \ \ \  
</span><span class="line">    \ \ \   \/___/      \ \ \   \//\/_/     \ \ \      _______   \ \ \ 
</span><span class="line">     \ \_\               \ \_\               \ \_\    /\______\   \ \_\
</span><span class="line">      \/_/                \/_/                \/_/    \/______/    \/_/
</span><span class="line"> __                   __                  __                  __       
</span><span class="line">/\ \                 /\ \                /\ \                /\ \      
</span><span class="line">\ \ \                \ \ \        ___    \ \ \       __  _   \ \ \     
</span><span class="line"> \ \ \                \ \ \      / __`\   \ \ \     /\ \/'\   \ \ \    
</span><span class="line">  \ \ \                \ \ \    /\ \L\ \   \ \ \    \/&gt;  &lt;/    \ \ \   
</span><span class="line">   \ \ \                \ \ \   \ \____/    \ \ \    /\_/\_\    \ \ \  
</span><span class="line">    \ \ \      _______   \ \ \   \/___/      \ \ \   \//\/_/     \ \ \ 
</span><span class="line">     \ \_\    /\______\   \ \_\               \ \_\               \ \_\
</span><span class="line">      \/_/    \/______/    \/_/                \/_/                \/_/
</span><span class="line"> __                  __                  __                  __       
</span><span class="line">/\ \                /\ \                /\ \                /\ \      
</span><span class="line">\ \ \       __  _   \ \ \        ___    \ \ \       __  _   \ \ \     
</span><span class="line"> \ \ \     /\ \/'\   \ \ \      / __`\   \ \ \     /\ \/'\   \ \ \    
</span><span class="line">  \ \ \    \/&gt;  &lt;/    \ \ \    /\ \L\ \   \ \ \    \/&gt;  &lt;/    \ \ \   
</span><span class="line">   \ \ \    /\_/\_\    \ \ \   \ \____/    \ \ \    /\_/\_\    \ \ \  
</span><span class="line">    \ \ \   \//\/_/     \ \ \   \/___/      \ \ \   \//\/_/     \ \ \ 
</span><span class="line">     \ \_\               \ \_\               \ \_\               \ \_\
</span><span class="line">      \/_/                \/_/                \/_/                \/_/</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Check out the video (HTML5 - webm, ogg or mp4):</p>

<video width="928" height="688" preload="none" controls="" poster=""><source src="http://blog.hrvoje.org/video/tictac.webm" type="video/webm; codecs=vp8, vorbis" /><source src="http://blog.hrvoje.org/video/tictac.ogg" /><source src="http://blog.hrvoje.org/video/tictac.mp4" type="video/mp4; codecs=&quot;avc1.42E01E, mp4a.40.2&quot;" /></video>

<p>Awesome!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[My Friend's 2048 Version]]></title>
    <link href="https://blog.hrvoje.org/blog/2014/09/27/my-friends-ultra-short-2048/"/>
    <updated>2014-09-27T16:37:58+02:00</updated>
    <id>https://blog.hrvoje.org/blog/2014/09/27/my-friends-ultra-short-2048</id>
    <content type="html"><![CDATA[<p>Recently I tried implementing a cool game called 2048 in Python and make it as short as possible. Thinking I did a decent job, I challenged a friend to give it a go. Blown away how much shorter it turned out to be, all I can say is - kudos to Veky.</p>

<!--more-->

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span>Veky&#8217;s very short 2048 </span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
<span class="line-number">22</span>
<span class="line-number">23</span>
</pre></td><td class="code"><pre><code class="python"><span class="line"><span class="kn">import</span> <span class="nn">random</span> <span class="kn">as</span> <span class="nn">R</span><span class="o">,</span><span class="nn">tkinter</span> <span class="kn">as</span> <span class="nn">T</span>
</span><span class="line"><span class="k">def</span> <span class="nf">M</span><span class="p">(</span><span class="n">n</span><span class="p">,</span><span class="n">q</span><span class="o">=</span><span class="k">lambda</span> <span class="n">m</span><span class="p">:</span><span class="nb">list</span><span class="p">(</span><span class="nb">map</span><span class="p">(</span><span class="nb">list</span><span class="p">,</span><span class="nb">zip</span><span class="p">(</span><span class="o">*</span><span class="n">m</span><span class="p">[::</span><span class="o">-</span><span class="mi">1</span><span class="p">]))),</span><span class="n">u</span><span class="o">=</span><span class="p">{</span><span class="s">&quot;key&quot;</span><span class="p">:</span><span class="nb">bool</span><span class="p">,</span><span class="s">&quot;reverse&quot;</span><span class="p">:</span><span class="mi">1</span><span class="p">}):</span>
</span><span class="line"> <span class="n">m</span><span class="o">=</span><span class="n">b</span>
</span><span class="line"> <span class="k">for</span> <span class="n">_</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mi">4</span><span class="o">-</span><span class="n">n</span><span class="p">):</span><span class="n">m</span><span class="o">=</span><span class="n">q</span><span class="p">(</span><span class="n">m</span><span class="p">)</span>
</span><span class="line"> <span class="k">for</span> <span class="n">r</span> <span class="ow">in</span> <span class="n">m</span><span class="p">:</span>
</span><span class="line">  <span class="n">r</span><span class="o">.</span><span class="n">sort</span><span class="p">(</span><span class="o">**</span><span class="n">u</span><span class="p">)</span>
</span><span class="line">  <span class="k">for</span> <span class="n">j</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mi">3</span><span class="p">):</span>
</span><span class="line">   <span class="k">if</span> <span class="n">r</span><span class="p">[</span><span class="n">j</span><span class="o">+</span><span class="mi">1</span><span class="p">]</span><span class="o">==</span><span class="n">r</span><span class="p">[</span><span class="n">j</span><span class="p">]:</span><span class="n">r</span><span class="p">[</span><span class="n">j</span><span class="p">:</span><span class="n">j</span><span class="o">+</span><span class="mi">2</span><span class="p">]</span><span class="o">=</span><span class="mi">2</span><span class="o">*</span><span class="n">r</span><span class="p">[</span><span class="n">j</span><span class="p">],</span><span class="mi">0</span>
</span><span class="line">  <span class="n">r</span><span class="o">.</span><span class="n">sort</span><span class="p">(</span><span class="o">**</span><span class="n">u</span><span class="p">)</span>
</span><span class="line"> <span class="k">for</span> <span class="n">_</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="n">n</span><span class="p">):</span><span class="n">m</span><span class="o">=</span><span class="n">q</span><span class="p">(</span><span class="n">m</span><span class="p">)</span>
</span><span class="line"> <span class="k">return</span> <span class="n">m</span><span class="o">*</span><span class="p">(</span><span class="n">m</span><span class="o">!=</span><span class="n">b</span><span class="p">)</span>
</span><span class="line"><span class="k">def</span> <span class="nf">A</span><span class="p">(</span><span class="n">q</span><span class="o">=</span><span class="mi">8</span><span class="o">**</span><span class="mi">8</span><span class="o">-</span><span class="mi">1</span><span class="p">):</span>
</span><span class="line"> <span class="n">k</span><span class="p">,</span><span class="n">l</span><span class="o">=</span><span class="n">R</span><span class="o">.</span><span class="n">choice</span><span class="p">([</span><span class="nb">divmod</span><span class="p">(</span><span class="n">i</span><span class="p">,</span><span class="mi">4</span><span class="p">)</span><span class="k">for</span> <span class="n">i</span><span class="p">,</span><span class="n">j</span> <span class="ow">in</span> <span class="nb">enumerate</span><span class="p">(</span><span class="nb">sum</span><span class="p">(</span><span class="n">b</span><span class="p">,[]))</span><span class="k">if</span> <span class="ow">not</span> <span class="n">j</span><span class="p">])</span>
</span><span class="line"> <span class="n">b</span><span class="p">[</span><span class="n">k</span><span class="p">][</span><span class="n">l</span><span class="p">]</span><span class="o">=</span><span class="n">R</span><span class="o">.</span><span class="n">choice</span><span class="p">((</span><span class="mi">2</span><span class="p">,</span><span class="mi">2</span><span class="p">,</span><span class="mi">4</span><span class="p">))</span>
</span><span class="line"> <span class="k">for</span> <span class="n">l</span><span class="p">,</span><span class="n">d</span> <span class="ow">in</span> <span class="nb">zip</span><span class="p">(</span><span class="n">L</span><span class="p">,</span><span class="nb">sum</span><span class="p">(</span><span class="n">b</span><span class="p">,[])):</span><span class="n">l</span><span class="o">.</span><span class="n">config</span><span class="p">(</span><span class="n">text</span><span class="o">=</span><span class="n">d</span> <span class="ow">or</span><span class="s">&#39;&#39;</span><span class="p">,</span><span class="n">bg</span><span class="o">=</span><span class="s">&#39;#&#39;</span><span class="o">+</span><span class="n">format</span><span class="p">(</span><span class="n">q</span><span class="o">-</span><span class="n">d</span><span class="o">*</span><span class="mi">999</span><span class="p">,</span><span class="s">&quot;06x&quot;</span><span class="p">))</span>
</span><span class="line"><span class="k">def</span> <span class="nf">K</span><span class="p">(</span><span class="n">e</span><span class="p">):</span>
</span><span class="line"> <span class="n">c</span><span class="o">=</span><span class="n">M</span><span class="p">(</span><span class="nb">dict</span><span class="p">(</span><span class="n">Left</span><span class="o">=</span><span class="mi">0</span><span class="p">,</span><span class="n">Up</span><span class="o">=</span><span class="mi">1</span><span class="p">,</span><span class="n">Right</span><span class="o">=</span><span class="mi">2</span><span class="p">,</span><span class="n">Down</span><span class="o">=</span><span class="mi">3</span><span class="p">)[</span><span class="n">e</span><span class="o">.</span><span class="n">keysym</span><span class="p">])</span>
</span><span class="line"> <span class="k">if</span> <span class="n">c</span><span class="p">:</span><span class="n">b</span><span class="p">[:]</span><span class="o">=</span><span class="n">c</span><span class="p">;</span><span class="n">A</span><span class="p">()</span>
</span><span class="line"> <span class="nb">any</span><span class="p">(</span><span class="nb">map</span><span class="p">(</span><span class="n">M</span><span class="p">,</span><span class="n">F</span><span class="p">))</span><span class="ow">or</span><span class="p">[</span><span class="n">x</span><span class="o">.</span><span class="n">config</span><span class="p">(</span><span class="n">bg</span><span class="o">=</span><span class="s">&#39;red&#39;</span><span class="p">,</span><span class="n">text</span><span class="o">=</span><span class="s">&#39;&lt;E2&gt;&lt;98&gt;&lt;B9&gt;&#39;</span><span class="p">)</span><span class="k">for</span> <span class="n">x</span> <span class="ow">in</span> <span class="n">L</span><span class="p">]</span>
</span><span class="line"><span class="n">F</span><span class="o">=</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span><span class="mi">1</span><span class="p">,</span><span class="mi">2</span><span class="p">,</span><span class="mi">3</span><span class="p">);</span><span class="n">b</span><span class="p">,</span><span class="n">t</span><span class="o">=</span><span class="p">[</span><span class="mi">4</span><span class="o">*</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span><span class="k">for</span> <span class="n">_</span> <span class="ow">in</span> <span class="n">F</span><span class="p">],</span><span class="n">T</span><span class="o">.</span><span class="n">Tk</span><span class="p">();</span><span class="n">t</span><span class="o">.</span><span class="n">grid</span><span class="p">()</span>
</span><span class="line"><span class="n">L</span><span class="o">=</span><span class="p">[</span><span class="n">T</span><span class="o">.</span><span class="n">Button</span><span class="p">(</span><span class="n">t</span><span class="p">,</span><span class="n">height</span><span class="o">=</span><span class="mi">1</span><span class="p">,</span><span class="n">width</span><span class="o">=</span><span class="mi">3</span><span class="p">,</span><span class="n">font</span><span class="o">=</span><span class="p">(</span><span class="s">&quot;Helvetica&quot;</span><span class="p">,</span><span class="mi">24</span><span class="p">))</span><span class="k">for</span> <span class="n">_</span> <span class="ow">in</span> <span class="mi">4</span><span class="o">*</span><span class="n">F</span><span class="p">]</span>
</span><span class="line"><span class="p">[</span><span class="n">L</span><span class="p">[</span><span class="n">i</span><span class="o">*</span><span class="mi">4</span><span class="o">+</span><span class="n">j</span><span class="p">]</span><span class="o">.</span><span class="n">grid</span><span class="p">(</span><span class="n">row</span><span class="o">=</span><span class="n">i</span><span class="p">,</span><span class="n">column</span><span class="o">=</span><span class="n">j</span><span class="p">)</span><span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="n">F</span> <span class="k">for</span> <span class="n">j</span> <span class="ow">in</span> <span class="n">F</span><span class="p">]</span>
</span><span class="line"><span class="n">A</span><span class="p">();</span><span class="n">t</span><span class="o">.</span><span class="n">bind</span><span class="p">(</span><span class="s">&#39;&lt;Key&gt;&#39;</span><span class="p">,</span><span class="n">K</span><span class="p">);</span><span class="n">t</span><span class="o">.</span><span class="n">mainloop</span><span class="p">()</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[A Simple 2048 Clone in Python]]></title>
    <link href="https://blog.hrvoje.org/blog/2014/09/20/a-simple-2048-clone-in-python/"/>
    <updated>2014-09-20T01:11:35+02:00</updated>
    <id>https://blog.hrvoje.org/blog/2014/09/20/a-simple-2048-clone-in-python</id>
    <content type="html"><![CDATA[<p>Every now and then a viral game shows up. It is difficult to name a particular quality which makes a game popular, but most people would probably describe it as <em>addictive</em>. 2048 is just that, despite its remarkable simplicity.</p>

<p>Soon, I started wondering how many lines of code would it take to write it and what are the bare essentials of the game, and tried writing my own version. To keep things short, movements are implemented in a single direction only. For the rest of the moves to work you have to rotate the matrix a few times first, perform the move and rotate it some more to return to your starting point. Not ideal, but simple it is. Game over detect simply checks if movement in any direction affects the board.</p>

<p>Tile creation needed to be short, so a list of zero-valued matrix elements’ coordinates was made, one picked out at random and a 2 or 4 placed there. To color the backgrounds differently, its background color is derived from its value. A dictionary could have been used as well, but it would be slightly longer.</p>

<p>That’s pretty much it - no score, no menu, no restart, no keypress error handling… just the bare essentials, but - it works. And it’s kind of fun, too!</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span>Short attempt with Tkinter</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
<span class="line-number">22</span>
<span class="line-number">23</span>
<span class="line-number">24</span>
<span class="line-number">25</span>
<span class="line-number">26</span>
<span class="line-number">27</span>
<span class="line-number">28</span>
<span class="line-number">29</span>
<span class="line-number">30</span>
<span class="line-number">31</span>
<span class="line-number">32</span>
<span class="line-number">33</span>
<span class="line-number">34</span>
<span class="line-number">35</span>
<span class="line-number">36</span>
<span class="line-number">37</span>
<span class="line-number">38</span>
<span class="line-number">39</span>
<span class="line-number">40</span>
<span class="line-number">41</span>
<span class="line-number">42</span>
</pre></td><td class="code"><pre><code class="python"><span class="line"><span class="kn">import</span> <span class="nn">random</span><span class="o">,</span><span class="nn">Tkinter</span>
</span><span class="line"><span class="k">def</span> <span class="nf">shift</span><span class="p">(</span><span class="n">c</span><span class="p">):</span> <span class="k">return</span> <span class="nb">list</span><span class="p">([</span><span class="n">i</span> <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="n">c</span> <span class="k">if</span> <span class="n">i</span><span class="o">&gt;</span><span class="mi">0</span><span class="p">]</span> <span class="o">+</span> <span class="p">[</span><span class="mi">0</span><span class="p">]</span><span class="o">*</span><span class="n">c</span><span class="o">.</span><span class="n">count</span><span class="p">(</span><span class="mi">0</span><span class="p">))</span>
</span><span class="line"><span class="k">def</span> <span class="nf">sms</span><span class="p">(</span><span class="n">l</span><span class="p">):</span>
</span><span class="line">        <span class="n">l</span><span class="o">=</span><span class="n">shift</span><span class="p">(</span><span class="n">l</span><span class="p">)</span>
</span><span class="line">        <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="nb">len</span><span class="p">(</span><span class="n">l</span><span class="p">)</span><span class="o">-</span><span class="mi">1</span><span class="p">):</span>
</span><span class="line">                <span class="k">if</span> <span class="n">l</span><span class="p">[</span><span class="n">i</span><span class="o">+</span><span class="mi">1</span><span class="p">]</span><span class="o">==</span><span class="n">l</span><span class="p">[</span><span class="n">i</span><span class="p">]:</span> <span class="n">l</span><span class="p">[</span><span class="n">i</span><span class="p">],</span> <span class="n">l</span><span class="p">[</span><span class="n">i</span><span class="o">+</span><span class="mi">1</span><span class="p">]</span> <span class="o">=</span> <span class="mi">2</span><span class="o">*</span><span class="n">l</span><span class="p">[</span><span class="n">i</span><span class="p">],</span> <span class="mi">0</span>
</span><span class="line">        <span class="k">return</span> <span class="n">shift</span><span class="p">(</span><span class="n">l</span><span class="p">)</span>
</span><span class="line"><span class="k">class</span> <span class="nc">igra</span><span class="p">(</span><span class="n">Tkinter</span><span class="o">.</span><span class="n">Tk</span><span class="p">):</span>
</span><span class="line">        <span class="n">b</span> <span class="o">=</span> <span class="p">[[</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">],[</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">],[</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">],[</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">]]</span>
</span><span class="line">        <span class="k">def</span> <span class="nf">__init__</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span><span class="n">parent</span><span class="p">):</span>
</span><span class="line">                <span class="n">Tkinter</span><span class="o">.</span><span class="n">Tk</span><span class="o">.</span><span class="n">__init__</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span><span class="n">parent</span><span class="p">)</span>
</span><span class="line">                <span class="bp">self</span><span class="o">.</span><span class="n">parent</span> <span class="o">=</span> <span class="n">parent</span>
</span><span class="line">                <span class="bp">self</span><span class="o">.</span><span class="n">grid</span><span class="p">()</span>
</span><span class="line">                <span class="bp">self</span><span class="o">.</span><span class="n">bl</span> <span class="o">=</span> <span class="p">[</span><span class="n">Tkinter</span><span class="o">.</span><span class="n">Button</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">height</span><span class="o">=</span><span class="mi">2</span><span class="p">,</span> <span class="n">width</span><span class="o">=</span><span class="mi">4</span><span class="p">,</span> <span class="n">state</span><span class="o">=</span><span class="n">Tkinter</span><span class="o">.</span><span class="n">DISABLED</span><span class="p">,</span> <span class="n">font</span><span class="o">=</span><span class="p">(</span><span class="s">&quot;Helvetica&quot;</span><span class="p">,</span> <span class="mi">24</span><span class="p">))</span> <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mi">16</span><span class="p">)]</span>
</span><span class="line">                <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mi">16</span><span class="p">):</span> <span class="bp">self</span><span class="o">.</span><span class="n">bl</span><span class="p">[</span><span class="n">i</span><span class="p">]</span><span class="o">.</span><span class="n">grid</span><span class="p">(</span><span class="n">row</span><span class="o">=</span><span class="n">i</span><span class="o">//</span><span class="mi">4</span><span class="p">,</span> <span class="n">column</span><span class="o">=</span><span class="n">i</span><span class="o">%</span><span class="mi">4</span><span class="p">)</span>
</span><span class="line">                <span class="bp">self</span><span class="o">.</span><span class="n">dodaj_novu</span><span class="p">()</span>
</span><span class="line">                <span class="bp">self</span><span class="o">.</span><span class="n">bind_all</span><span class="p">(</span><span class="s">&#39;&lt;Key&gt;&#39;</span><span class="p">,</span> <span class="bp">self</span><span class="o">.</span><span class="n">key</span><span class="p">)</span>
</span><span class="line">                <span class="bp">self</span><span class="o">.</span><span class="n">mainloop</span><span class="p">()</span>
</span><span class="line">        <span class="k">def</span> <span class="nf">rot</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span> <span class="bp">self</span><span class="o">.</span><span class="n">b</span> <span class="o">=</span> <span class="nb">list</span><span class="p">(</span><span class="nb">map</span><span class="p">(</span><span class="nb">list</span><span class="p">,</span> <span class="nb">zip</span><span class="p">(</span><span class="o">*</span><span class="bp">self</span><span class="o">.</span><span class="n">b</span><span class="p">[::</span><span class="o">-</span><span class="mi">1</span><span class="p">])))</span>
</span><span class="line">        <span class="k">def</span> <span class="nf">move</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">n</span><span class="p">):</span>
</span><span class="line">                <span class="n">diff</span> <span class="o">=</span> <span class="bp">self</span><span class="o">.</span><span class="n">b</span><span class="p">[:]</span>
</span><span class="line">                <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="n">n</span><span class="p">):</span> <span class="bp">self</span><span class="o">.</span><span class="n">rot</span><span class="p">()</span>
</span><span class="line">                <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mi">4</span><span class="p">):</span> <span class="bp">self</span><span class="o">.</span><span class="n">b</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">=</span> <span class="n">sms</span><span class="p">(</span><span class="bp">self</span><span class="o">.</span><span class="n">b</span><span class="p">[</span><span class="n">i</span><span class="p">])</span>
</span><span class="line">                <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mi">4</span><span class="o">-</span><span class="n">n</span><span class="p">):</span> <span class="bp">self</span><span class="o">.</span><span class="n">rot</span><span class="p">()</span>
</span><span class="line">                <span class="k">return</span> <span class="mi">1</span> <span class="k">if</span> <span class="bp">self</span><span class="o">.</span><span class="n">b</span> <span class="o">!=</span> <span class="n">diff</span> <span class="k">else</span> <span class="mi">0</span>
</span><span class="line">        <span class="k">def</span> <span class="nf">dodaj_novu</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
</span><span class="line">                <span class="n">k</span> <span class="o">=</span> <span class="p">[(</span><span class="n">i</span><span class="o">//</span><span class="mi">4</span><span class="p">,</span> <span class="n">i</span><span class="o">%</span><span class="mi">4</span><span class="p">)</span> <span class="k">for</span> <span class="n">i</span><span class="p">,</span><span class="n">j</span> <span class="ow">in</span> <span class="nb">enumerate</span><span class="p">(</span><span class="nb">sum</span><span class="p">(</span><span class="bp">self</span><span class="o">.</span><span class="n">b</span><span class="p">,</span> <span class="p">[]))</span> <span class="k">if</span> <span class="n">j</span> <span class="o">==</span> <span class="mi">0</span><span class="p">][</span><span class="n">random</span><span class="o">.</span><span class="n">randint</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="nb">sum</span><span class="p">(</span><span class="bp">self</span><span class="o">.</span><span class="n">b</span><span class="p">,</span> <span class="p">[])</span><span class="o">.</span><span class="n">count</span><span class="p">(</span><span class="mi">0</span><span class="p">)</span><span class="o">-</span><span class="mi">1</span><span class="p">)]</span>
</span><span class="line">                <span class="bp">self</span><span class="o">.</span><span class="n">b</span><span class="p">[</span><span class="n">k</span><span class="p">[</span><span class="mi">0</span><span class="p">]][</span><span class="n">k</span><span class="p">[</span><span class="mi">1</span><span class="p">]]</span> <span class="o">=</span> <span class="n">random</span><span class="o">.</span><span class="n">randint</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span><span class="mi">2</span><span class="p">)</span><span class="o">*</span><span class="mi">2</span>
</span><span class="line">                <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mi">16</span><span class="p">):</span>
</span><span class="line">                        <span class="n">d</span> <span class="o">=</span> <span class="bp">self</span><span class="o">.</span><span class="n">b</span><span class="p">[</span><span class="n">i</span><span class="o">//</span><span class="mi">4</span><span class="p">][</span><span class="n">i</span><span class="o">%</span><span class="mi">4</span><span class="p">]</span>
</span><span class="line">                        <span class="bp">self</span><span class="o">.</span><span class="n">bl</span><span class="p">[</span><span class="n">i</span><span class="p">]</span><span class="o">.</span><span class="n">config</span><span class="p">(</span><span class="n">text</span><span class="o">=</span><span class="n">d</span> <span class="k">if</span> <span class="n">d</span> <span class="k">else</span> <span class="s">&#39; &#39;</span><span class="p">,</span> <span class="n">bg</span><span class="o">=</span><span class="s">&#39;#</span><span class="si">%06x</span><span class="s">&#39;</span><span class="o">%</span> <span class="p">((</span><span class="mi">2</span><span class="o">**</span><span class="mi">24</span><span class="o">-</span><span class="mi">1</span><span class="p">)</span> <span class="o">-</span> <span class="p">(</span><span class="n">d</span><span class="o">*</span><span class="mi">1500</span><span class="p">)</span> <span class="p">))</span>
</span><span class="line">        <span class="k">def</span> <span class="nf">key</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">event</span><span class="p">):</span>
</span><span class="line">                <span class="n">direction</span><span class="o">=</span><span class="p">{</span><span class="s">&#39;Left&#39;</span><span class="p">:</span> <span class="mi">0</span><span class="p">,</span> <span class="s">&#39;Down&#39;</span><span class="p">:</span> <span class="mi">1</span><span class="p">,</span> <span class="s">&#39;Right&#39;</span><span class="p">:</span> <span class="mi">2</span><span class="p">,</span> <span class="s">&#39;Up&#39;</span><span class="p">:</span> <span class="mi">3</span><span class="p">}</span>
</span><span class="line">                <span class="k">if</span> <span class="bp">self</span><span class="o">.</span><span class="n">move</span><span class="p">(</span><span class="n">direction</span><span class="p">[</span><span class="n">event</span><span class="o">.</span><span class="n">keysym</span><span class="p">]):</span> <span class="bp">self</span><span class="o">.</span><span class="n">dodaj_novu</span><span class="p">()</span>
</span><span class="line">                <span class="n">p</span> <span class="o">=</span> <span class="bp">self</span><span class="o">.</span><span class="n">b</span><span class="p">[:]</span>
</span><span class="line">                <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mi">4</span><span class="p">):</span>
</span><span class="line">                        <span class="bp">self</span><span class="o">.</span><span class="n">move</span><span class="p">(</span><span class="n">i</span><span class="p">)</span>
</span><span class="line">                        <span class="k">if</span> <span class="bp">self</span><span class="o">.</span><span class="n">b</span> <span class="o">!=</span> <span class="n">p</span><span class="p">:</span>
</span><span class="line">                                <span class="bp">self</span><span class="o">.</span><span class="n">b</span> <span class="o">=</span> <span class="n">p</span><span class="p">[:]</span>
</span><span class="line">                                <span class="k">return</span>
</span><span class="line">                <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mi">16</span><span class="p">):</span> <span class="bp">self</span><span class="o">.</span><span class="n">bl</span><span class="p">[</span><span class="n">i</span><span class="p">]</span><span class="o">.</span><span class="n">config</span><span class="p">(</span><span class="n">bg</span><span class="o">=</span><span class="s">&#39;red&#39;</span><span class="p">,</span> <span class="n">text</span><span class="o">=</span><span class="s">&#39;:(&#39;</span><span class="p">)</span>
</span><span class="line"><span class="n">a</span> <span class="o">=</span> <span class="n">igra</span><span class="p">(</span><span class="bp">None</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>…and it looks like this:</p>

<p><img class="center" src="https://blog.hrvoje.org/images/2048.png" /></p>
]]></content>
  </entry>
  
</feed>

<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Game | Hrvoje's Blog]]></title>
  <link href="https://blog.hrvoje.org/blog/categories/game/atom.xml" rel="self"/>
  <link href="https://blog.hrvoje.org/"/>
  <updated>2018-06-01T15:54:51+02:00</updated>
  <id>https://blog.hrvoje.org/</id>
  <author>
    <name><![CDATA[Hrvoje]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Tic-Tac-Toe in ... MySQL]]></title>
    <link href="https://blog.hrvoje.org/blog/2014/10/05/tic-tac-toe-in-dot-dot-dot-mysql/"/>
    <updated>2014-10-05T17:25:44+02:00</updated>
    <id>https://blog.hrvoje.org/blog/2014/10/05/tic-tac-toe-in-dot-dot-dot-mysql</id>
    <content type="html"><![CDATA[<p>If you ever attended a boring lecture, you probably know this game by heart. Frequently scribbled on textbook margins and school desks, it’s insanely popular and fun to play. Talking to a friend about MySQL made me wonder if such a respectable, high performance database can be misused and tricked into being a gaming platfom. While it isn’t likely going to run Quake, maybe a simple game of Tic-Tac-Toe would be just right.</p>

<p>Why would anyone do this? Well, making <a href="https://www.youtube.com/watch?v=qWkUFxItWmU">floppy drives play The Imperial March</a> isn’t very useful either, but it’s darn entertaining. MySQL is a powerful tool with strong scripting capabilities and Turing complete as well, so implementing this game in a single player mode is possible.</p>

<!--more-->

<h3 id="implementation">Implementation</h3>

<p>First, we need a board. To keep things simple, we’ll keep it as a 9 letter string - matrix element with position (1,1) will be the first element, then element (1,2) and so on .</p>

<p><code>mysql
SET @ploca = '_________';
</code></p>

<p>After defining something to store and describe the board in, we declare AI is using ‘o’ and the player will be playing with ‘x’. Underscores are used to represent unclaimed fields. Since MySQL isn’t Perl or Python, we’ll have to improvise a little and create a function to check what’s placed on the board at a specific (row,column) position.</p>

<p><code>mysql
CREATE FUNCTION get(instring VARCHAR(255), y INT, x INT) RETURNS CHAR(1) RETURN SUBSTRING(instring, 3*(y-1)+x, 1);
</code></p>

<p>Now we need to think of a way to display the board to the player. There is no simple print function and we are trying to display a string as a table, so this is what I could think of.</p>

<p><code>mysql
DELIMITER $$
CREATE PROCEDURE display_board(IN l VARCHAR(16))
BEGIN
      DROP TEMPORARY TABLE IF EXISTS `tablica`;
      CREATE TEMPORARY TABLE `tablica` (ta varchar(1), bli varchar(1), ca varchar(1));
      INSERT INTO tablica VALUES (get(l, 1,1), get(l, 1,2), get(l, 1,3));
      INSERT INTO tablica VALUES (get(l, 2,1), get(l, 2,2), get(l, 2,3));
      INSERT INTO tablica VALUES (get(l, 3,1), get(l, 3,2), get(l, 3,3));          
      SELECT * from tablica;
END
$$
</code></p>

<p>We declare a temporary table, extract characters from our board-string and select it. This will print it (somewhat) nicely to the player.</p>

<p><code>
+------+------+------+
| ta   | bli  | ca   |
+------+------+------+
| o    | _    | _    |
| _    | x    | _    |
| _    | _    | _    |
+------+------+------+
3 rows in set (0.02 sec)
</code></p>

<h3 id="ai---making-a-respectable-oponent">AI - making a respectable oponent</h3>

<p>This is a good time to talk about the AI. Taking the classic approach isn’t something you do when coding for fun, so I decided to do something different. When doing something weird in a database engine, why not use it in your advantage? Basic combinatorics tells us each field can be either ‘o’, ‘x’ or empty, and there are 9 fields so that’s 3<sup>9</sup> = 19,683 possible board positions. Also, many positions are invalid - you can’t have all x’s because players take turns, you can’t play after you’ve lost etc. so the real number of valid board is much smaller (it’s 5477).</p>

<p>Game theory teaches us Tic-Tac-Toe can never actually be won if you pick optimal moves, so we’ll run it once to generate a tree of best computer moves given a certain position, store it permanently in the database, and use it to defeat the puny human.</p>

<p><img class="center" src="/images/Tic-tac-toe-game-tree.svg"></p>

<p>Each optimal move for a certain position will be stored as a table row along with its predecessor’s id, so we can look it up and know where to move.</p>

<p><code>
+-------+-----------+------------+------+------+--------+
| id    | matrix    | moves_next | kraj | win  | parent |
+-------+-----------+------------+------+------+--------+
| 32041 | oxooxxo_x | x          |    1 | o    |  32040 |
+-------+-----------+------------+------+------+--------+
</code></p>

<p>An example of a move stored in a database - this is a finished game which a computer (‘o’ player) won. Let’s implement a function for making a move.</p>

<p>&#8220;`mysql
DELIMITER $$
CREATE PROCEDURE place_x(IN y INT, IN x INT)
BEGIN
      IF get(@ploca, y, x) = ‘_’ THEN <br />
    SELECT concat(substring(@ploca, 1, 3<em>(y-1)+x-1), ‘x’, substring(@ploca, 3</em>(y-1)+x+1)) INTO @ploca;
    CALL display_board(@ploca);</p>

<pre><code>    SELECT id,kraj,win FROM tictactoe WHERE matrix=@ploca AND moves_next='o' LIMIT 1 INTO @parent_id, @kraj, @win;
    SELECT matrix,kraj,win FROM tictactoe WHERE parent=@parent_id LIMIT 1 INTO @ploca, @kraj, @win;

CALL display_board(@ploca);

IF @kraj = 1 THEN   
  IF @win = 'o' THEN SELECT 'Izgubili ste!' AS ' '; ELSE  SELECT 'Nerijeseno. Pokusajte ponovno!' AS ' '; END IF;
  SET @ploca = '_________';
  CALL display_board(@ploca);
END IF;
  END IF; END $$ DELIMITER ; ```
</code></pre>

<h3 id="constructing-the-optimal-move-tree">Constructing the optimal move tree</h3>

<p>If you ever saw Wargames, you probably remember the scene where the kid saves the world by making the computer play Tic-Tac-Toe with itself. The same thing is done here (minus saving the world part). Computer plays both sides, but when impersonating a human it checks all moves, not just the best one, because a human might make a mistake. To determine the best move, a recursive minimax algorithm is used, checking long-term consequence of a move (‘move’ function) and choosing the one with a best outcome.</p>

<p>This python algorithm is ran only once; it recursively traverses the moves tree and inserts nodes as database rows. Our database could also be imported from external file, effectively eliminating any external dependencies, even if they are only a one-time thing. A single database row also contains state flags to determine if the game is over or not.</p>

<p>&#8220;`python</p>

<h1 id="usrbinpython">!/usr/bin/python</h1>
<p>import itertools, hashlib, MySQLdb</p>

<p>ploca = list(‘_’ * 9) 
db=MySQLdb.connect(‘localhost’, ‘game’, ‘game’, ‘game’)
c=db.cursor()</p>

<p>def move(ploca, player):
    if len(set(ploca)) == 1: return 0, 4
    nextplayer = ‘x’ if player is ‘o’ else ‘o’ 
    if pobjednik(ploca):
        return (-1, -1) if player is ‘x’ else (1, -1)</p>

<pre><code>reslist = []
lista = []

if provjeri_kraj(ploca): return 0, -1
for i in range(9):
    if ploca[i] == '_': lista.append(i)

for i in lista:
    ploca[i]=player
    ret,mov=move(ploca, nextplayer)
    reslist.append(ret)
    ploca[i]='_'

if player is 'x': return max(reslist),lista[reslist.index(max(reslist))]
else: return min(reslist),lista[reslist.index(min(reslist))]
</code></pre>

<p>def moguci_potezi(ploca): return [i for i in zip(range(9), ploca) if i[1] is ‘_’]
def provjeri_kraj(ploca): return True if not len(moguci_potezi(ploca)) else False
def igraceva_polja(igrac, ploca): return [i for i in zip(range(9), ploca) if i[1] == igrac]
def nerijeseno(ploca):  return True if provjeri_kraj(ploca) and not pobjednik(ploca) else False</p>

<p>def pobjednik(ploca):     <br />
    dobitne_mogucnosti = ([0,1,2], [3,4,5], [6,7,8], [0,3,6], [1,4,7], [2,5,8], [2,4,6], [0,4,8])
    for strana in (‘x’, ‘o’):
        if [len([ploca[i] for i in j if ploca[i] is strana]) for j in dobitne_mogucnosti].count(3): return strana
    return False</p>

<p>def povuci_potez(ploca, strana, parent):
    win = ‘NULL’
    tbl = [’‘.join(ploca), strana]</p>

<pre><code>kraj = 1 if nerijeseno(ploca) or pobjednik(ploca) else 0
if kraj: win = pobjednik(ploca) if pobjednik(ploca) else 'Tie'

tbl.extend([win, str(kraj)])
c.execute("INSERT INTO tictactoe (matrix, moves_next, win, kraj) VALUES ('{}');".format("', '".join(tbl)))
lastrowid = c.lastrowid
db.commit()

if parent is not 'NULL': c.execute("UPDATE tictactoe SET parent='{0}' WHERE id='{1}'".format(parent, lastrowid))
if pobjednik(ploca) or nerijeseno(ploca): return

slobodna_polja = moguci_potezi(ploca)
if strana == 'x': 
    for i in slobodna_polja:
        ploca_recursive=ploca[:]
        ploca_recursive[i[0]] = 'x'
        povuci_potez(ploca_recursive, 'o', lastrowid)
else:
    ploca[move(ploca, 'o')[1]] = 'o'
    povuci_potez(ploca, 'x', lastrowid)
</code></pre>

<p>povuci_potez(ploca, ‘x’, ‘NULL’)</p>

<p>&#8220;`</p>

<h3 id="making-it-fancy">Making it fancy</h3>

<p>That’s all nice, it works, but one more thing… can we make it 3D, just for fun? Mysql can execute shell commands, but apparently you can’t pipe anything through shell scripts. Let’s use a trick - very often it produces long, long tables, and to facilitate looking at the data you can set a <em>pager</em> - something it will pipe your output through, like <em>less</em> or your favorite editor. Why not using that and piping it through … figlet! One apt-get install figlet later, finding a cool looking 3d font and a little sed to strip everything not important and we’re left with this.</p>

<p><code>mysql
mysql&gt; pager sed -e 's/| ta   | bli  | ca   |//g' -e 's/  \+/ /g' -e 's/[+\-]//g' -e '/^$/d' | figlet -f 'larry3d.flf'
mysql&gt; call place_x(2,3);
</code></p>

<p><code>plain
 __                  __                  __                   __       
/\ \                /\ \                /\ \                 /\ \      
\ \ \        ___    \ \ \       __  _   \ \ \                \ \ \     
 \ \ \      / __`\   \ \ \     /\ \/'\   \ \ \                \ \ \    
  \ \ \    /\ \L\ \   \ \ \    \/&gt;  &lt;/    \ \ \                \ \ \   
   \ \ \   \ \____/    \ \ \    /\_/\_\    \ \ \                \ \ \  
    \ \ \   \/___/      \ \ \   \//\/_/     \ \ \      _______   \ \ \ 
     \ \_\               \ \_\               \ \_\    /\______\   \ \_\
      \/_/                \/_/                \/_/    \/______/    \/_/
 __                   __                  __                  __       
/\ \                 /\ \                /\ \                /\ \      
\ \ \                \ \ \        ___    \ \ \       __  _   \ \ \     
 \ \ \                \ \ \      / __`\   \ \ \     /\ \/'\   \ \ \    
  \ \ \                \ \ \    /\ \L\ \   \ \ \    \/&gt;  &lt;/    \ \ \   
   \ \ \                \ \ \   \ \____/    \ \ \    /\_/\_\    \ \ \  
    \ \ \      _______   \ \ \   \/___/      \ \ \   \//\/_/     \ \ \ 
     \ \_\    /\______\   \ \_\               \ \_\               \ \_\
      \/_/    \/______/    \/_/                \/_/                \/_/
 __                  __                  __                  __       
/\ \                /\ \                /\ \                /\ \      
\ \ \       __  _   \ \ \        ___    \ \ \       __  _   \ \ \     
 \ \ \     /\ \/'\   \ \ \      / __`\   \ \ \     /\ \/'\   \ \ \    
  \ \ \    \/&gt;  &lt;/    \ \ \    /\ \L\ \   \ \ \    \/&gt;  &lt;/    \ \ \   
   \ \ \    /\_/\_\    \ \ \   \ \____/    \ \ \    /\_/\_\    \ \ \  
    \ \ \   \//\/_/     \ \ \   \/___/      \ \ \   \//\/_/     \ \ \ 
     \ \_\               \ \_\               \ \_\               \ \_\
      \/_/                \/_/                \/_/                \/_/
</code></p>

<p>Check out the video (HTML5 - webm, ogg or mp4):</p>

<p><video width='928' height='688' preload='none' controls poster=''><source src='http://blog.hrvoje.org/video/tictac.webm' type='video/webm; codecs=vp8, vorbis'><source src='http://blog.hrvoje.org/video/tictac.ogg' ><source src='http://blog.hrvoje.org/video/tictac.mp4' type='video/mp4; codecs="avc1.42E01E, mp4a.40.2"'></video></p>

<p>Awesome!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[A Simple 2048 Clone in Python]]></title>
    <link href="https://blog.hrvoje.org/blog/2014/09/20/a-simple-2048-clone-in-python/"/>
    <updated>2014-09-20T01:11:35+02:00</updated>
    <id>https://blog.hrvoje.org/blog/2014/09/20/a-simple-2048-clone-in-python</id>
    <content type="html"><![CDATA[<p>Every now and then a viral game shows up. It is difficult to name a particular quality which makes a game popular, but most people would probably describe it as <em>addictive</em>. 2048 is just that, despite its remarkable simplicity.</p>

<p>Soon, I started wondering how many lines of code would it take to write it and what are the bare essentials of the game, and tried writing my own version. To keep things short, movements are implemented in a single direction only. For the rest of the moves to work you have to rotate the matrix a few times first, perform the move and rotate it some more to return to your starting point. Not ideal, but simple it is. Game over detect simply checks if movement in any direction affects the board.</p>

<p>Tile creation needed to be short, so a list of zero-valued matrix elements’ coordinates was made, one picked out at random and a 2 or 4 placed there. To color the backgrounds differently, its background color is derived from its value. A dictionary could have been used as well, but it would be slightly longer.</p>

<p>That’s pretty much it - no score, no menu, no restart, no keypress error handling… just the bare essentials, but - it works. And it’s kind of fun, too!</p>

<p><code>python Short attempt with Tkinter
import random,Tkinter
def shift(c): return list([i for i in c if i&gt;0] + [0]*c.count(0))
def sms(l):
        l=shift(l)
        for i in range(len(l)-1):
                if l[i+1]==l[i]: l[i], l[i+1] = 2*l[i], 0
        return shift(l)
class igra(Tkinter.Tk):
        b = [[0,0,0,0],[0,0,0,0],[0,0,0,0],[0,0,0,0]]
        def __init__(self,parent):
                Tkinter.Tk.__init__(self,parent)
                self.parent = parent
                self.grid()
                self.bl = [Tkinter.Button(self, height=2, width=4, state=Tkinter.DISABLED, font=("Helvetica", 24)) for i in range(16)]
                for i in range(16): self.bl[i].grid(row=i//4, column=i%4)
                self.dodaj_novu()
                self.bind_all('&lt;Key&gt;', self.key)
                self.mainloop()
        def rot(self): self.b = list(map(list, zip(*self.b[::-1])))
        def move(self, n):
                diff = self.b[:]
                for i in range(n): self.rot()
                for i in range(4): self.b[i] = sms(self.b[i])
                for i in range(4-n): self.rot()
                return 1 if self.b != diff else 0
        def dodaj_novu(self):
                k = [(i//4, i%4) for i,j in enumerate(sum(self.b, [])) if j == 0][random.randint(0, sum(self.b, []).count(0)-1)]
                self.b[k[0]][k[1]] = random.randint(1,2)*2
                for i in range(16):
                        d = self.b[i//4][i%4]
                        self.bl[i].config(text=d if d else ' ', bg='#%06x'% ((2**24-1) - (d*1500) ))
        def key(self, event):
                direction={'Left': 0, 'Down': 1, 'Right': 2, 'Up': 3}
                if self.move(direction[event.keysym]): self.dodaj_novu()
                p = self.b[:]
                for i in range(4):
                        self.move(i)
                        if self.b != p:
                                self.b = p[:]
                                return
                for i in range(16): self.bl[i].config(bg='red', text=':(')
a = igra(None)
</code></p>

<p>…and it looks like this:</p>

<p><img class="center" src="/images/2048.png"></p>
]]></content>
  </entry>
  
</feed>
